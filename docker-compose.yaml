version: '3.8'

networks:
  monitoring:
    driver: bridge

services:
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    hostname: exporter
    ports:
      - 9100:9100
    restart: unless-stopped
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - monitoring
  grafana:
    image: grafana/grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    networks:
      - monitoring

  db:
    image: mariadb
    container_name: mysql
    hostname: db
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: example
    volumes:
      - ./exporter.sql:/docker-entrypoint-initdb.d/exporter.sql:ro
    ports:
      - "3306:3306"
    networks:
      - monitoring

  mysql-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysql-exporter
    hostname: mysql-exporter
    restart: unless-stopped
    ports:
      - "9104:9104"
    environment:
      - DATA_SOURCE_NAME='user:password@(db:3306)/'
    volumes:
      - ./config.my-cnf:/.my.cnf:ro
    networks:
      - monitoring

  web: 
    image: nginx:latest
    container_name: nginx
    hostname: metrics.local
    restart: unless-stopped
    ports: 
      - "80:80" 
    volumes: 
      - ./nginx.conf:/etc/nginx/nginx.conf:ro       
    networks:
      - monitoring